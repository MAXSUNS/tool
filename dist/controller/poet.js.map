{"version":3,"sources":["../../controller/poet.js"],"names":["fs","require","http","request","crypto","md5","createHash","async","add","ctx","body","username","info","files","newfiles","Promise","resolve","reject","readdir","err","picFiles","throw","count","fileName","readFile","bytesRead","console","log","words","split","mapSeries","JSON","parse","aut","callback","path","paragraphs","cryptPwd","author","title","addElatic","error","result","password","update","digest","sleep","ms","setTimeout","concurrencyCount","url","method","json","headers","response","statusCode","module","exports"],"mappings":"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","file":"poet.js","sourcesContent":["/**\n * Created by suns on 2018/3/14.\n */\nvar fs = require(\"fs\");\nvar http = require(\"http\");\nvar request = require(\"request\");\nvar crypto = require(\"crypto\");\nvar md5 = crypto.createHash(\"md5\");\nvar async = require(\"async\");\n\n\nfunction add(ctx) {\n    ctx.body = {\n        username: ctx.request.body.username\n    }\n}\nasync function info(ctx) {\n    let files = []\n    let newfiles = []\n\n    await new Promise((resolve, reject) => { // 读image文件夹\n        fs.readdir('./json', function (err, picFiles) {\n            if (err) ctx.throw(err)\n            files = picFiles // 将所有的文件夹名字放到外面来。\n            resolve()  // resolve过后，await语句才结束\n        })\n    })\n    let count = 0;\n    for (let fileName of files) {\n        (function (count) {\n            fs.readFile('./json/' + fileName, function (err, bytesRead) {\n                if (err) {\n                    console.log(\"读取文件失败\" + fileName + '-result.js');\n                } else {\n                    let words = fileName.split(\".\");\n                    if (words[0] == 'poet' && words[1] == 'song' && words[2] > 60000) {\n                        async.mapSeries(JSON.parse(bytesRead),function (aut,callback) {\n                            let path = 'http://119.23.64.113:9200/' + words[0] + '/' + words[1] + '/';\n                            if(aut.paragraphs[0]){\n                                path = path + cryptPwd(aut.paragraphs[0]);\n                            }else{\n                                path = path + cryptPwd(aut.author+aut.title);\n                            }\n                            addElatic(path, aut,callback);\n                        },function (error,result) {\n                            console.log(\"mapLimit:\"+result)\n                        });\n                        // for (let aut of JSON.parse(bytesRead)) {\n                        //     let path = 'http://119.23.64.113:9200/' + words[0] + '/' + words[1] + '/';\n                        //     path = path + cryptPwd(aut.title + count);\n                        //\n                        //     console.log(path);\n                        //     addElatic(path, aut);\n                        //     count = count + 1;\n                        // }\n                    }\n\n\n                }\n            });\n        })(count);\n    }\n\n\n}\n\n\nfunction cryptPwd(password) {\n    var md5 = crypto.createHash('md5');\n    return md5.update(password).digest('hex');\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nvar concurrencyCount= 0;\nfunction addElatic(path, aut,callback) {\n    concurrencyCount++;\n    console.log(\"当前线程数==\"+concurrencyCount)\n    request({\n        url: path,\n        method: \"PUT\",\n        json: true,\n        headers: {\n            \"content-type\": \"application/json\",\n        },\n        body: aut\n    }, function (error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(path); // 请求成功的处理逻辑\n            concurrencyCount--;\n            callback(null,\"success\");\n        } else {\n            console.log(\"error\" + path);\n            concurrencyCount--;\n            addElatic(path, aut,callback);\n        }\n    });\n// request('http://119.23.64.113:9200/'+words[0]+'/'+words[1]+'/'+files[0], function (error, response, body) {\n    //     if (!error && response.statusCode == 200) {\n    //         console.log(body);\n    //     } else {\n    //         console.log(response.statusCode)\n    //         // messageService.sendMessage(environment.name + '环境 eureka异常');\n    //     }\n    // })\n}\n\nmodule.exports = {\n    add: add,\n    info: info\n}\n"]}